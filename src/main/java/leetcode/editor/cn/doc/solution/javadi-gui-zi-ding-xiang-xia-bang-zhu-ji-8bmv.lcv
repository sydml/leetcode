对于树的题目，有统一的思考方法，那就是**站在树（子树）的顶端根节点root思考**。

那么对于此题，我们思考如下问题：**如果当前处在root节点，左右节点应该告诉我们什么信息才能得到答案？**

根据题中对路径的定义，对于此题我们来回答以上问题。当我们遍历到树中某个节点时，我希望**左子节点告诉我，在左子树中，以左子节点为开始（端点）的路径和最大为多少**，同理我也希望右子节点告诉我类似的信息。

如果有了以上信息，再来思考最后一个问题：**有了这个信息如何得到答案？**

显然，对于当前节点有四个选择：

1. 我自己就是一条路径
2. 只跟**左**子节点合并成一条路径
3. 只跟**右**子节点合并成一条路径
4. 以自己为桥梁，跟**左、右**子节点合并成一条路径

需要注意的是，**我们在递归求解的时候，第四种情况是不能作为递归的返回值的，因为它不符合我们对递归所期望返回值的定义（因为此时该子节点并不是拥有最大路径和路径的起点（端点））**，但它也是一个可能的解，所以我们用一个全局变量记录上面四种值的最大值，递归结束后，该变量就是答案。

再次强调一下，**当节点以自己为桥梁连接两边形成一条路径时，根据路径定义，其祖先节点不再可能加入到这条路径中，也就是说这种情况下，它是解的一种可能，但不符合我们递归返回值的定义。**

想通上面的逻辑后，代码就呼之欲出了，看看最后的代码，核心的就六七行，却解决了一个Hard问题。👏

* 

```
class Solution {
    int pathSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        dfs(root);
        return pathSum;
    }

    // dfs 返回以该节点为端点的最大路径和
    public int dfs(TreeNode node) {
        if (node == null) return 0;
        int left = dfs(node.left);
        int right = dfs(node.right);
        // 当前节点有四个选择：
        // 1）独立成线，直接返回自己的值 
        // 2）跟左子节点合成一条路径 
        // 3）跟右子节点合成一条路径
        int ret = Math.max(node.val, node.val + Math.max(left, right));
        // 4）以自己为桥梁，跟左、右子节点合并成一条路径
        pathSum = Math.max(pathSum, Math.max(ret, node.val + left + right));
        return ret;
    }
}
```

