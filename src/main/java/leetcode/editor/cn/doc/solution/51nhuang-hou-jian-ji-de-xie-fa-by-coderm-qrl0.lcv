### 解题思路

使用回溯法的标准模板即可。
这里需要记录查找到的皇后的坐标x,y；可以利用回溯的函数栈的顺序作为x轴，即path的size对应当前要查找的皇后的x坐标，
只需要在y轴上做回溯查找即可。

最后生成坐标信息的时候也是利用path中的位置作为x轴，值作为y轴。

比如n=4,path的值是：1，3，0，2
那么四个皇后的坐标就分别是：
(0,1)
(1,3)
(2,0)
(3,2)
利用函数栈的顺序可以很好的简化代码

### 代码

* java

```java
class Solution {
    private List<List<String>> res = new ArrayList<>();
    private List<Integer> path = new ArrayList<>();

    public List<List<String>> solveNQueens(int n) {
        backTracking(n);
        return res;
    }
    private void backTracking(int n) {
        if (path.size() == n) {
            res.add(getResult());
        }
        for (int j = 0; j < n; j++) {
            if (invalid(path.size(), j)) continue;
            path.add(j);
            backTracking(n);
            path.remove(path.size() - 1);
        }
    }
    private boolean invalid(int x, int y) {
        for (int i = 0; i < path.size(); i++) {
            int j = path.get(i);
            if (i == x || j == y || i - j == x - y || i + j == x + y) {
                return true;
            }
        }
        return false;
    }

    private List<String> getResult() {
        return path.stream().map(
            row -> {
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < path.size(); i++) {
                    sb.append(i == row ? "Q" : ".");
                }
                return sb.toString();
            }
        ).collect(Collectors.toList());
    }
}
```

